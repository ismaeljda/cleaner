#!/usr/bin/env python3
import sys
import random
import time
import os
from threading import Timer

# Essaie d'importer PyQt5 ou PySide2
try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                                 QHBoxLayout, QLabel, QPushButton, QFrame, QMessageBox, QDesktopWidget)
    from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QPropertyAnimation, QRect, QEasingCurve
    from PyQt5.QtGui import QPixmap, QFont, QPalette, QColor
    QT_AVAILABLE = "PyQt5"
except ImportError:
    try:
        from PySide2.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                                       QHBoxLayout, QLabel, QPushButton, QFrame, QMessageBox, QDesktopWidget)
        from PySide2.QtCore import Qt, QTimer, Signal as pyqtSignal, QPropertyAnimation, QRect, QEasingCurve
        from PySide2.QtGui import QPixmap, QFont, QPalette, QColor
        QT_AVAILABLE = "PySide2"
    except ImportError:
        print("‚ùå Ni PyQt5 ni PySide2 ne sont install√©s!")
        print("Installez l'un d'eux avec:")
        print("  pip install PyQt5")
        print("  ou")
        print("  pip install PySide2")
        sys.exit(1)

# Configuration
IMAGE_PATH = "image.jpg"
WINDOW_WIDTH = 1200
WINDOW_HEIGHT = 800

class LinuxTrollWindow(QMainWindow):
    restart_signal = pyqtSignal()
    
    def __init__(self, parent_pos=None):
        super().__init__()
        self.is_running = True
        self.blink_timer = QTimer()
        self.top_timer = QTimer()
        self.shake_timer = QTimer()
        self.title_red = True
        self.original_pos = None
        self.shake_intensity = 15
        self.parent_pos = parent_pos
        
        # Liste des fen√™tres enfants cr√©√©es
        self.child_windows = []
        
        # Connecte le signal de red√©marrage
        self.restart_signal.connect(self.restart_window)
        
        self.setup_window()
        self.create_interface()
        self.start_effects()
    
    def setup_window(self):
        """Configure la fen√™tre principale"""
        self.setWindowTitle("‚ö†Ô∏è ALERTE S√âCURIT√â CRITIQUE ‚ö†Ô∏è")
        self.setFixedSize(WINDOW_WIDTH, WINDOW_HEIGHT)
        
        # Position de la fen√™tre
        if self.parent_pos:
            # Position d√©cal√©e par rapport √† la fen√™tre parent
            offset_x = random.randint(-200, 200)
            offset_y = random.randint(-150, 150)
            x = max(0, min(self.parent_pos[0] + offset_x, 
                          QApplication.desktop().width() - WINDOW_WIDTH))
            y = max(0, min(self.parent_pos[1] + offset_y, 
                          QApplication.desktop().height() - WINDOW_HEIGHT))
        else:
            # Centre la premi√®re fen√™tre
            screen = QApplication.desktop().screenGeometry()
            x = (screen.width() - WINDOW_WIDTH) // 2
            y = (screen.height() - WINDOW_HEIGHT) // 2
        
        self.move(x, y)
        self.original_pos = (x, y)
        
        # Style sombre
        self.setStyleSheet("""
            QMainWindow {
                background-color: #1a1a1a;
            }
            QWidget {
                background-color: #1a1a1a;
                color: white;
            }
        """)
        
        # Garde au premier plan
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.Window)
        
        # Emp√™che la fermeture normale
        self.setAttribute(Qt.WA_QuitOnClose, False)
    
    def create_interface(self):
        """Cr√©e l'interface utilisateur"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # Frame principal avec bordure rouge
        main_frame = QFrame()
        main_frame.setStyleSheet("""
            QFrame {
                background-color: #1a1a1a;
                border: 5px solid red;
                margin: 10px;
            }
        """)
        main_layout.addWidget(main_frame)
        
        frame_layout = QVBoxLayout()
        main_frame.setLayout(frame_layout)
        
        # Titre principal
        self.title_label = QLabel("üö® SYST√àME COMPROMIS üö®")
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setFont(QFont("DejaVu Sans", 28, QFont.Bold))
        self.title_label.setStyleSheet("color: #ff0000; margin: 20px;")
        frame_layout.addWidget(self.title_label)
        
        # Sous-titre
        subtitle = QLabel("ACC√àS NON AUTORIS√â D√âTECT√â")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setFont(QFont("DejaVu Sans", 16, QFont.Bold))
        subtitle.setStyleSheet("color: #ffff00; margin-bottom: 20px;")
        frame_layout.addWidget(subtitle)
        
        # Layout horizontal pour image et d√©tails
        content_layout = QHBoxLayout()
        frame_layout.addLayout(content_layout)
        
        # Section image
        self.create_image_section(content_layout)
        
        # Section d√©tails
        self.create_details_section(content_layout)
        
        # Boutons
        self.create_buttons(frame_layout)
    
    def create_image_section(self, layout):
        """Cr√©e la section image"""
        image_widget = QWidget()
        image_layout = QVBoxLayout()
        image_widget.setLayout(image_layout)
        
        # Essaie de charger l'image
        script_dir = os.path.dirname(os.path.abspath(__file__))
        image_path = os.path.join(script_dir, IMAGE_PATH)
        
        if os.path.exists(image_path):
            try:
                pixmap = QPixmap(image_path)
                if not pixmap.isNull():
                    # Redimensionne l'image
                    scaled_pixmap = pixmap.scaled(600, 500, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                    
                    # Frame avec bordure rouge pour l'image
                    img_frame = QFrame()
                    img_frame.setStyleSheet("border: 3px solid red; background-color: black;")
                    img_frame_layout = QVBoxLayout()
                    img_frame.setLayout(img_frame_layout)
                    
                    img_label = QLabel()
                    img_label.setPixmap(scaled_pixmap)
                    img_label.setAlignment(Qt.AlignCenter)
                    img_frame_layout.addWidget(img_label)
                    
                    image_layout.addWidget(img_frame)
                    layout.addWidget(image_widget)
                    return
            except Exception as e:
                print(f"Erreur de chargement de l'image : {e}")
        
        # Image ASCII de remplacement
        ascii_art = """
    ‚ö†Ô∏è  DANGER  ‚ö†Ô∏è
   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   ‚ïë   SYST√àME   ‚ïë
   ‚ïë COMPROMIS ! ‚ïë
   ‚ïë             ‚ïë
   ‚ïë    üíÄüë®‚ÄçüíªüíÄ    ‚ïë
   ‚ïë             ‚ïë
   ‚ïë   HACKEUR   ‚ïë
   ‚ïë   D√âTECT√â   ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    üö®  URGENT  üö®"""
        
        ascii_label = QLabel(ascii_art)
        ascii_label.setAlignment(Qt.AlignCenter)
        ascii_label.setFont(QFont("Courier", 12, QFont.Bold))
        ascii_label.setStyleSheet("color: red; background-color: black; padding: 20px;")
        image_layout.addWidget(ascii_label)
        
        layout.addWidget(image_widget)
    
    def create_details_section(self, layout):
        """Cr√©e la section d√©tails syst√®me"""
        details_frame = QFrame()
        details_frame.setStyleSheet("""
            QFrame {
                background-color: #2a2a2a;
                border: 2px solid gray;
                border-radius: 5px;
            }
        """)
        details_layout = QVBoxLayout()
        details_frame.setLayout(details_layout)
        
        # Titre des d√©tails
        details_title = QLabel("üìä RAPPORT DE S√âCURIT√â LINUX")
        details_title.setAlignment(Qt.AlignCenter)
        details_title.setFont(QFont("DejaVu Sans", 14, QFont.Bold))
        details_title.setStyleSheet("color: #00ff00; margin: 10px;")
        details_layout.addWidget(details_title)
        
        # Informations syst√®me
        try:
            username = os.getenv('USER', 'unknown')
            hostname = os.uname().nodename
            system = os.uname().sysname
        except:
            username = 'user'
            hostname = 'localhost'
            system = 'Linux'
        
        info_text = f"""üî¥ STATUS: SYSTEM PWNED
üïí TIME: {time.strftime("%H:%M:%S")}
üåê TARGET: {username}@{hostname}
üñ•Ô∏è  SYSTEM: {system}
üì° IP SRC: 192.168.1.{random.randint(1, 254)}
üîë ROOT: {random.choice(['YES', 'PENDING', 'ACQUIRED'])}
‚ö° PID: {random.randint(1000, 9999)}

‚ö†Ô∏è COMPROMISED DATA:
‚Ä¢ ~/.ssh/id_rsa (Private Keys)
‚Ä¢ ~/.bash_history (Commands)  
‚Ä¢ ~/Documents (Personal Files)
‚Ä¢ Browser passwords & cookies
‚Ä¢ /etc/shadow (System Hashes)

üö® MALICIOUS ACTIVITIES:
‚Ä¢ Reverse shell established
‚Ä¢ Keylogger active
‚Ä¢ Network traffic sniffed
‚Ä¢ Privilege escalation
‚Ä¢ Data exfiltration in progress

üíÄ YOU'VE BEEN PWNED! üíÄ
Root access: COMPROMISED"""
        
        info_label = QLabel(info_text)
        info_label.setFont(QFont("Courier", 9))
        info_label.setStyleSheet("color: white; padding: 15px; background-color: #2a2a2a;")
        info_label.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        details_layout.addWidget(info_label)
        
        layout.addWidget(details_frame)
    
    def create_buttons(self, layout):
        """Cr√©e les boutons d'action"""
        button_layout = QHBoxLayout()
        
        # Bouton principal
        main_button = QPushButton("üîí SECURE SYSTEM NOW")
        main_button.setFont(QFont("DejaVu Sans", 14, QFont.Bold))
        main_button.setStyleSheet("""
            QPushButton {
                background-color: #ff0000;
                color: white;
                padding: 10px 30px;
                border: 3px solid darkred;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #cc0000;
            }
        """)
        main_button.clicked.connect(self.fake_security_action)
        button_layout.addWidget(main_button)
        
        # Bouton secondaire
        alt_button = QPushButton("‚ùå IGNORE (RISKY)")
        alt_button.setFont(QFont("DejaVu Sans", 12))
        alt_button.setStyleSheet("""
            QPushButton {
                background-color: #444444;
                color: white;
                padding: 8px 20px;
                border: 2px solid #666666;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #555555;
            }
        """)
        alt_button.clicked.connect(self.fake_ignore_action)
        button_layout.addWidget(alt_button)
        
        # Bouton Linux
        linux_button = QPushButton("üêß RUN CLEANUP")
        linux_button.setFont(QFont("DejaVu Sans", 12))
        linux_button.setStyleSheet("""
            QPushButton {
                background-color: #0066cc;
                color: white;
                padding: 8px 20px;
                border: 2px solid #0044aa;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #0055bb;
            }
        """)
        linux_button.clicked.connect(self.fake_linux_action)
        button_layout.addWidget(linux_button)
        
        layout.addLayout(button_layout)
    
    def start_effects(self):
        """D√©marre les effets visuels"""
        if not self.is_running:
            return
        
        # Timer pour le clignotement du titre
        self.blink_timer.timeout.connect(self.blink_title)
        self.blink_timer.start(800)
        
        # Timer pour rester au premier plan
        self.top_timer.timeout.connect(self.keep_on_top)
        self.top_timer.start(2000)
    
    def start_screen_shake(self):
        """D√©marre l'effet de tremblement de l'√©cran"""
        if not self.is_running or not self.original_pos:
            return
        
        self.shake_timer.timeout.connect(self.shake_screen)
        self.shake_timer.start(50)  # Tremblement rapide
        
        # Arr√™te le tremblement apr√®s 3 secondes
        QTimer.singleShot(3000, self.stop_screen_shake)
    
    def shake_screen(self):
        """Fait trembler la fen√™tre"""
        if not self.is_running or not self.original_pos:
            return
        
        # Calcule une position al√©atoire autour de la position originale
        shake_x = random.randint(-self.shake_intensity, self.shake_intensity)
        shake_y = random.randint(-self.shake_intensity, self.shake_intensity)
        
        new_x = self.original_pos[0] + shake_x
        new_y = self.original_pos[1] + shake_y
        
        # S'assure que la fen√™tre reste dans l'√©cran
        screen = QApplication.desktop().screenGeometry()
        new_x = max(0, min(new_x, screen.width() - WINDOW_WIDTH))
        new_y = max(0, min(new_y, screen.height() - WINDOW_HEIGHT))
        
        self.move(new_x, new_y)
    
    def stop_screen_shake(self):
        """Arr√™te l'effet de tremblement"""
        if self.shake_timer.isActive():
            self.shake_timer.stop()
        
        # Remet la fen√™tre √† sa position originale
        if self.original_pos:
            self.move(self.original_pos[0], self.original_pos[1])
    
    def multiply_windows(self, count=5):
        """Cr√©e plusieurs fen√™tres suppl√©mentaires"""
        current_pos = (self.x(), self.y())
        
        for i in range(count):
            try:
                # Cr√©e une nouvelle fen√™tre avec une position d√©cal√©e
                new_window = LinuxTrollWindow(parent_pos=current_pos)
                new_window.show()
                self.child_windows.append(new_window)
                
                # Ajoute un petit d√©lai pour l'effet visuel
                QTimer.singleShot(100 * i, lambda w=new_window: w.start_screen_shake())
                
            except Exception as e:
                print(f"Erreur lors de la cr√©ation d'une fen√™tre: {e}")
                break
    
    def blink_title(self):
        """Fait clignoter le titre"""
        if not self.is_running:
            return
        
        color = "#ff0000" if self.title_red else "#ffff00"
        self.title_label.setStyleSheet(f"color: {color}; margin: 20px;")
        self.title_red = not self.title_red
    
    def keep_on_top(self):
        """Maintient la fen√™tre au premier plan"""
        if not self.is_running:
            return
        
        self.raise_()
        self.activateWindow()
    
    def fake_security_action(self):
        """Simule une action de s√©curit√©"""
        # D√©marre le tremblement
        self.start_screen_shake()
        
        msg = QMessageBox(self)
        msg.setWindowTitle("SCANNING SYSTEM")
        msg.setText("üîÑ Running security scan...\n\n"
                   "‚ö†Ô∏è NEW THREATS DETECTED ‚ö†Ô∏è\n\n"
                   "Additional vulnerabilities found!\n\n"
                   "üêß This is a harmless prank! üòÑ")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        
        # Multiplie les fen√™tres
        self.multiply_windows(3)
        
        self.restart_popup()
    
    def fake_ignore_action(self):
        """Simule l'action d'ignorer"""
        # D√©marre le tremblement intense
        self.shake_intensity = 25
        self.start_screen_shake()
        
        msg = QMessageBox(self)
        msg.setWindowTitle("CRITICAL ERROR")
        msg.setText("üö® WARNING! üö®\n\n"
                   "Ignoring security alerts puts your system at EXTREME RISK!\n\n"
                   "üî• ACTIVE THREATS DETECTED üî•\n\n"
                   "Restarting security scan...\n\n"
                   "üòà You've been TROLLED! üòà")
        msg.setIcon(QMessageBox.Critical)
        msg.exec_()
        
        # Multiplie encore plus les fen√™tres
        self.multiply_windows(4)
        
        self.restart_popup()
    
    def fake_linux_action(self):
        """Action sp√©ciale Linux"""
        # Tremblement mod√©r√©
        self.shake_intensity = 20
        self.start_screen_shake()
        
        msg = QMessageBox(self)
        msg.setWindowTitle("LINUX CLEANUP")
        msg.setText("üêß Running Linux system cleanup...\n\n"
                   "$ sudo rm -rf /* --no-preserve-root\n"
                   "Just kidding! üòÇ\n\n"
                   "üé≠ This is just a harmless troll!\n\n"
                   "Your Linux system is perfectly safe! üõ°Ô∏è\n\n"
                   "But the popup will return anyway... üòà")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        
        # Multiplie les fen√™tres
        self.multiply_windows(2)
        
        self.restart_popup()
    
    def restart_popup(self):
        """Red√©marre la popup"""
        # Utilise un timer pour √©viter les probl√®mes de threading
        QTimer.singleShot(1000, self.restart_signal.emit)
    
    def restart_window(self):
        """Red√©marre la fen√™tre"""
        if not self.is_running:
            return
        
        # Cr√©e une nouvelle instance
        current_pos = (self.x(), self.y())
        new_window = LinuxTrollWindow(parent_pos=current_pos)
        new_window.show()
        
        # Ferme la fen√™tre actuelle
        self.close()
    
    def closeEvent(self, event):
        """G√®re les tentatives de fermeture - MULTIPLICATION DES FEN√äTRES!"""
        # EFFET SP√âCIAL: Multiplie les fen√™tres de mani√®re agressive
        self.multiply_windows(random.randint(6, 10))
        
        # Tremblement intense pour toutes les nouvelles fen√™tres
        for window in self.child_windows[-5:]:  # Les 5 derni√®res cr√©√©es
            if window and hasattr(window, 'start_screen_shake'):
                QTimer.singleShot(random.randint(100, 500), window.start_screen_shake)
        
        msg = QMessageBox(self)
        msg.setWindowTitle("CANNOT CLOSE")
        msg.setText("üö® CRITICAL ALERT ACTIVE üö®\n\n"
                   "This window cannot be closed until\n"
                   "security issues are resolved!\n\n"
                   "üêß Welcome to Linux trolling! üòÑ\n\n"
                   "üí• MULTIPLYING WINDOWS! üí•")
        msg.setIcon(QMessageBox.Warning)
        
        # Fait trembler cette fen√™tre pendant que le message s'affiche
        self.shake_intensity = 30
        self.start_screen_shake()
        
        msg.exec_()
        
        event.ignore()  # Emp√™che la fermeture
        self.restart_popup()
    
    def stop_troll(self):
        """Arr√™te le troll proprement"""
        self.is_running = False
        self.blink_timer.stop()
        self.top_timer.stop()
        if hasattr(self, 'shake_timer'):
            self.shake_timer.stop()
        
        # Ferme toutes les fen√™tres enfants
        for window in self.child_windows:
            if window:
                try:
                    window.stop_troll()
                    window.close()
                except:
                    pass

class LinuxTrollApp:
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.app.setQuitOnLastWindowClosed(False)  # Emp√™che la fermeture automatique
        
        # Style global sombre
        self.app.setStyle('Fusion')
        palette = self.app.palette()
        palette.setColor(QPalette.Window, QColor(26, 26, 26))
        palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
        self.app.setPalette(palette)
        
        self.window = LinuxTrollWindow()
        self.window.show()
        
        # D√©marre un tremblement initial l√©ger apr√®s 2 secondes
        QTimer.singleShot(2000, self.window.start_screen_shake)
    
    def run(self):
        """Lance l'application"""
        return self.app.exec_()

# Lancement du programme
if __name__ == "__main__":
    print(f"üêß Linux Troll Popup starting with {QT_AVAILABLE}...")
    print("üõë Close terminal or press Ctrl+C to stop")
    
    try:
        app = LinuxTrollApp()
        sys.exit(app.run())
    except KeyboardInterrupt:
        print("\nüõë Troll stopped by user")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)